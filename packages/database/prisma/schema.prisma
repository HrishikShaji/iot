// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String                @id @default(auto()) @map("_id") @db.ObjectId
  email             String                @unique
  password          String
  emailVerified     DateTime?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  accounts          Account[]
  sessions          Session[]
  
  trailers           Trailer[]              @relation("UserTrailer")
  
  // Trailers this user has access to (shared)
  trailerAccesses   TrailerAccess[]       @relation("TrailerAccesses")
  
  // Invitations sent by this user
  sentInvitations   Invitation[]          @relation("SentInvitations")
  
  // Access grants made by this user
  grantedAccesses   TrailerAccess[]       @relation("GrantedAccesses")
  
  // B2C role
  roleId            String                @db.ObjectId
  role              Role                  @relation(fields: [roleId], references: [id])
  
  // B2B memberships
  organizations     OrganizationMember[]
}

model Trailer {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  // Owner
  userId      String           @unique @db.ObjectId
  user        User             @relation("UserTrailer", fields: [userId], references: [id], onDelete: Cascade)
  
  // Shared access
  sharedWith  TrailerAccess[]  @relation("SharedWith")
  
  // Invitations for this trailer
  invitations Invitation[]     @relation("TrailerInvitations")
}

model Invitation {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  email         String
  inviterId     String           @db.ObjectId
  inviter       User             @relation("SentInvitations", fields: [inviterId], references: [id], onDelete: Cascade)
  trailerId     String           @db.ObjectId
  trailer       Trailer          @relation("TrailerInvitations", fields: [trailerId], references: [id], onDelete: Cascade)
  token         String           @unique
  status        InvitationStatus @default(PENDING)
  roleId        String           @db.ObjectId
  role          Role             @relation(fields: [roleId], references: [id])
  expiresAt     DateTime
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  @@unique([email, trailerId])
}

model TrailerAccess {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String     @db.ObjectId
  user        User       @relation("TrailerAccesses", fields: [userId], references: [id], onDelete: Cascade)
  trailerId   String     @db.ObjectId
  trailer     Trailer    @relation("SharedWith", fields: [trailerId], references: [id], onDelete: Cascade)
  accessType  AccessType @default(VIEW)
  grantedAt   DateTime   @default(now())
  grantedBy   String     @db.ObjectId
  granter     User       @relation("GrantedAccesses", fields: [grantedBy], references: [id], onDelete: Cascade)
  roleId      String     @db.ObjectId
  role        Role       @relation(fields: [roleId], references: [id])
  
  @@unique([userId, trailerId])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
}
enum AccessType {
  VIEW
  EDIT
  ADMIN
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
}


model Organization {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  type        String   // "B2C" or "B2B"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  members     OrganizationMember[]
  roles       Role[]
}

model OrganizationMember {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  userId         String       @db.ObjectId
  organizationId String       @db.ObjectId
  roleId         String       @db.ObjectId
  joinedAt       DateTime     @default(now())
  
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  role           Role         @relation(fields: [roleId], references: [id])
  
  @@unique([userId, organizationId])
}

model Role {
  id             String              @id @default(auto()) @map("_id") @db.ObjectId
  name           String              
  description    String?
  context        String              // "B2C" or "B2B"
  organizationId String?             @db.ObjectId // null for B2C roles, set for org-specific B2B roles
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  
  organization   Organization?       @relation(fields: [organizationId], references: [id])
  users          User[]
  invitations    Invitation[]
  trailerAccesses TrailerAccess[]
  members        OrganizationMember[]
  permissions    RolePermission[]
  
  @@unique([name, context, organizationId])
}

model Permission {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  action      String           
  resource    String           
  scope       String           @default("all")
  context     String           // "B2C", "B2B", or "both"
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  roles       RolePermission[]
  
  @@unique([action, resource, scope, context])
}

// Junction table for Role <-> Permission (many-to-many)
model RolePermission {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  roleId       String     @db.ObjectId
  permissionId String     @db.ObjectId
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
}
