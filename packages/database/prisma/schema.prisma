// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  password      String
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  
  // One user has ONE role
  roleId        String    @db.ObjectId
  role          Role      @relation(fields: [roleId], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
}

model Role {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String       @unique // "employee", "customer", "admin"
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // One role can have MANY users
  users       User[]
  
  // One role can have MANY permissions
  permissions RolePermission[]
}

model Permission {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  action      String           // "create", "read", "update", "delete"
  resource    String           // "users", "profile", etc.
  scope       String           @default("all") // "all", "own", "department", "team"
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  // One permission can belong to MANY roles
  roles       RolePermission[]
  
  @@unique([action, resource, scope])
}

// Junction table for Role <-> Permission (many-to-many)
model RolePermission {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  roleId       String     @db.ObjectId
  permissionId String     @db.ObjectId
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
}
